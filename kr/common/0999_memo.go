package common

import (
	"fmt"
)

func F나를_위한_문구() {
	fmt.Println("")
	fmt.Println("----------------------------------------------------------")
	fmt.Println("	쉽고 간단하게, 테스트로 검증해 가면서 마음 편하게.")
	fmt.Println("----------------------------------------------------------")
	fmt.Println("")
}
func F메모() {
	F나를_위한_문구()
	fmt.Println("----------------------------------------------------------")
	fmt.Println("                  메            모")
	fmt.Println("----------------------------------------------------------")
	fmt.Println("")
	fmt.Println("TODO : F공유해도_안전함() 에서 S로 시작하는 문자열만 값을 변경하는 메소드라고 가정한다.")
	fmt.Println("		이 가정이 틀릴 수도 있는 데,")
	fmt.Println("		실제로 내부값이 변경되는 지 어떻게 확인할 수 있는 지 모르겠음.")
	fmt.Println("		reflect로 복사본을 생성한 후 모든 메소드를 실행시켜봐야 하나?")
	fmt.Println("		1. 복사본 자동 생성")
	fmt.Println("		2. 메소드를 실행.")
	fmt.Println("		3. 내부 멤버필드 값이 변했는 지 확인.")
	fmt.Println("		1, 2, 3을 하나씩 쪼개서 함수로 만든 후 테스트를 하면서 가능한 지 해 볼 것.")
	fmt.Println("TODO : common.편의_함수 및 테스트")
	fmt.Println("TODO : common.기본_자료형 및 테스트")
	fmt.Println("TODO : I고정소숫점 내부 구현을 speter.decimal로 변경.")
	fmt.Println("			나눗셈의 나머지값 처리방식을 원하는 방식으로 지정 가능함.")
	fmt.Println("TODO : S고정소숫점.G금액_문자열()")
	fmt.Println("TODO : I통화 테스트 및 구현체 작성.")
	fmt.Println("TODO : 모드 V구조체에 sync.RWMutext 도입.")
	fmt.Println("TODO : common.공용_자료형 및 테스트")
	fmt.Println("TODO : common.기타 자료형 및 펑션")
	fmt.Println("TODO : tools.* 바뀐 API에 맞게 수정.")
	fmt.Println("TODO : TestS종목별_포트폴리오(), TestS포트폴리오_통합관리(), TestS종목별_포트폴리오_통합관리().")
	fmt.Println("TODO : I포트폴리오 구현체.")
	fmt.Println("TODO : I종목별_포트폴리오_통합관리. G단가() 기준.")
	fmt.Println("TODO : C포트폴리오내역구성원, C포트폴리오내역구성원 수정.")
	fmt.Println("       0203 C포트폴리오내역구성원 : G현재단가(), G매입금액().")
	fmt.Println("       0203 C포트폴리오내역 : GSharpe비율(), G연평균수익률().")
	fmt.Println("TODO : I위험관리 구현체. VAR, 절대 수치, 자본 대비 비율.")
	fmt.Println("TODO : I전략그룹과 I전략을 하나로 통일.")
	fmt.Println("TODO : 0900_테스트용_샘플데이터_test.go")
	fmt.Println("		테스트의 기반이 되는 샘플데이터에 테스트가 없으면 테스트 자체가 취약해 짐.")
	fmt.Println("TODO : 자주 사용되는 함수 중 panic 가능성이 높은 함수에 recover() 추가.")
	fmt.Println("TODO : I통화. 서로 다른 통화끼리 환율을 고려해서 연산이 가능한 지 고려.")
	fmt.Println("TODO : go test ghts/kr/common 병목지점 해결.")
	fmt.Println("")
	fmt.Println("TO_RESEARCH : I상수형 의 immutability를 검사하는 편의 함수.")
	fmt.Println("		가칭 'F상수형_검증()' 은 입력값으로 다음을 받는다.")
	fmt.Println("		1. 검증하고자 하는 자료형의 reflect.Type 객체.")
	fmt.Println("		2. 해당 자료형의 모든 생성자")
	fmt.Println("		F상수형_검증()은 자동으로 여러 값을 생성해서 해당 자료형을 생성한 후,")
	fmt.Println("		 생성자 파라메터에 사용된 변수를 변경하거나,")
	fmt.Println("		 모든 메소드의 실행하거나  및 그 실행결과 값 변수를 변경하더라도,")
	fmt.Println("		 내부값이 변하지 않는다는 것을 확인하면 된다.")
	fmt.Println("TO_RESEARCH : 자동 Deep Copy 가능한 지 연구. map 자동 복사가 가능한가?")
	fmt.Println("TO_RESEARCH : 자동 Immutability 검사 .")
	fmt.Println("TO_RESEARCH : 데이터 저장소를 sqlite3로 하는 것은 어떨까?")
	fmt.Println("PLAN : 초장기 계획")
	fmt.Println("		만약 사용자 UI를 만들게 된다면 HTML5 기반으로 한다.")
	fmt.Println("		a. GopherJS, CoffeeScript : Javascript에 적응하는 어려움을 덜어줄 가능성이 있음.")
	fmt.Println("		b. AngularJS : DOM을 직접 조작해야 하는 어려움을 덜어줄 가능성이 있음.")
	fmt.Println("			 			GopherJS용 바인딩도 존재함.")
	fmt.Println("")
	fmt.Println("")
	fmt.Println("")
	fmt.Println("1. 위험관리 : VAR 방식의 잠재적 손실폭 제한.")
	fmt.Println("			잠재적 최대손실이 현재 자본금의 비율을 추가 매수를 중단.")
	fmt.Println("2. 위험관리 : VAR을 벗어나는 경제위기 상황에 대비한 절대적 손실폭 제한.")
	fmt.Println("3. 위험관리 : 경제위기 상황에서 손실율이 감당할 수 있는 범위 이내인지")
	fmt.Println("				확인하는 테스트 케이스 작성할 것.")
	fmt.Println("4. 종목 선정 : 우량주 위주로 일평균 거래량, 주당 가격을 고려하여 선정.")
	fmt.Println("				4 묶음으로 나누어서, 1/4만 전략 개발용으로 사용.")
	fmt.Println("				검증용으로 1/4씩만 사용하여 3중 검증을 거칠 것.")
	fmt.Println("				일단 초기 연구 대상 종목부터 선정할 것.")
}
