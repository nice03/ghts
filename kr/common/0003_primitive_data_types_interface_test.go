package common

import (
	//"math/big"
	//"testing"
)

/*
func TestN일자_문자열(테스트 *testing.T) {
	c일자 := NC시점_문자열("2000-01-01")
	F같은값_확인(테스트, c일자.G값().Format("2006-01-02"), "2000-01-01")

	c일자 = NC시점_문자열("변환 불가능한 문자열")
	F같은값_확인(테스트, c일자, nil)

	v일자 := NV시점_문자열("2000-01-01")
	F같은값_확인(테스트, v일자.G값().Format("2006-01-02"), "2000-01-01")

	v일자 = NV시점_문자열("변환 불가능한 문자열")
	F같은값_확인(테스트, v일자, nil)
}

func TestN정밀수(테스트 *testing.T) {
	도우미_N정밀수_에러(테스트, nil)

	예상값 := big.NewRat(100, 1)
	도우미_N정밀수(테스트, uint(100), 예상값)
	도우미_N정밀수(테스트, uint8(100), 예상값)
	도우미_N정밀수(테스트, uint16(100), 예상값)
	도우미_N정밀수(테스트, uint32(100), 예상값)
	도우미_N정밀수(테스트, uint64(100), 예상값)
	도우미_N정밀수(테스트, int(100), 예상값)
	도우미_N정밀수(테스트, int8(100), 예상값)
	도우미_N정밀수(테스트, int16(100), 예상값)
	도우미_N정밀수(테스트, int32(100), 예상값)
	도우미_N정밀수(테스트, int64(100), 예상값)

	예상값 = big.NewRat(10002, 100)
	도우미_N정밀수(테스트, float32(100.02), 예상값)
	도우미_N정밀수(테스트, float64(100.02), 예상값)

	예상값 = big.NewRat(10025, 100)
	정밀수_참조형 := big.NewRat(100250, 1000)
	도우미_N정밀수(테스트, 정밀수_참조형, 예상값)
	도우미_N정밀수(테스트, *정밀수_참조형, 예상값)

	예상값 = big.NewRat(100, 1)
	도우미_N정밀수(테스트, NC부호없는_정수(100), 예상값)
	도우미_N정밀수(테스트, NC정수(100), 예상값)

	예상값 = big.NewRat(100025, 1000)
	도우미_N정밀수(테스트, NC실수(100.025), 예상값)
	도우미_N정밀수(테스트, NC정밀수(100.025), 예상값)

	예상값 = big.NewRat(100, 1)
	도우미_N정밀수(테스트, NC통화(KRW, 100.025), 예상값)

	도우미_N정밀수(테스트, "100", 예상값)
	도우미_N정밀수(테스트, NC문자열("100"), 예상값)

	도우미_N정밀수_에러(테스트, "변환 불가능한 문자열")
	도우미_N정밀수_에러(테스트, NC문자열("변환 불가능한 문자열"))
}

func 도우미_N정밀수(테스트 *testing.T, 원본값 interface{}, 예상값 *big.Rat) {
	c정밀수 := NC정밀수(원본값)

	F참인지_확인(테스트, c정밀수 != nil)
	F같은값_확인(테스트, c정밀수.GRat(), 예상값)

	v정밀수 := NV정밀수(원본값)

	F참인지_확인(테스트, v정밀수 != nil)
	F같은값_확인(테스트, v정밀수.GRat(), 예상값)
}

func 도우미_N정밀수_에러(테스트 *testing.T, 원본값 interface{}) {
	c정밀수 := NC정밀수(원본값)

	F참인지_확인(테스트, c정밀수 == nil)

	v정밀수 := NV정밀수(원본값)

	F참인지_확인(테스트, v정밀수 == nil)
}

func TestI통화G같음(테스트 *testing.T) {
	F참인지_확인(테스트, NC통화(KRW, 100).G같음(NC통화(KRW, 100.0)))
	F참인지_확인(테스트, NC통화(KRW, 100).G같음(NC통화(KRW, "100.0")))

	// 통화종류만 바꾸어도 달라야 함.
	F거짓인지_확인(테스트, NC통화(KRW, 100).G같음(NC통화(USD, 100.0)))
	F거짓인지_확인(테스트, NC통화(KRW, 100).G같음(NC통화(USD, "100.0")))

	// 통화 금액만 바꾸어도 달라야 함.
	F거짓인지_확인(테스트, NC통화(KRW, 100).G같음(NC통화(KRW, 200.0)))
	F거짓인지_확인(테스트, NC통화(KRW, 100).G같음(NC통화(KRW, "200.0")))
}

func TestV통화S절대값(테스트 *testing.T) {
	F_TODO("TestF통화_절대값() 이하 통화 관련 연산함수 테스트.")
	입력값 := big.NewRat(-1001, 10)
	출력값 := F통화_절대값(입력값)

	F같은값_확인(테스트, 출력값, big.NewRat(1001, 10))

	입력값 = big.NewRat(1001, 10)
	출력값 = F통화_절대값(입력값)

	F같은값_확인(테스트, 출력값, big.NewRat(1001, 10))
}

func TestV통화S더하기(테스트 *testing.T) {
	입력값1 := big.NewRat(1001, 10)
	입력값2 := big.NewRat(1001, 10)
	출력값 := F통화_더하기(입력값1, 입력값2)

	F같은값_확인(테스트, 출력값, big.NewRat(2002, 10))
}

func TestV통화S빼기(테스트 *testing.T) {
	입력값1 := big.NewRat(1001, 10)
	입력값2 := big.NewRat(1001, 10)
	출력값 := F통화_빼기(입력값1, 입력값2)

	F같은값_확인(테스트, 출력값, big.NewRat(0, 1))
}

func TestV통화S곱하기(테스트 *testing.T) {
	입력값1 := big.NewRat(100, 1)
	입력값2 := big.NewRat(100, 1)
	출력값 := F통화_곱하기(입력값1, 입력값2)

	F같은값_확인(테스트, 출력값, big.NewRat(10000, 1))
}

func TestV통화S나누기(테스트 *testing.T) {
	입력값1 := big.NewRat(1001, 10)
	입력값2 := big.NewRat(1001, 10)
	출력값, 에러 := F통화_나누기(입력값1, 입력값2)

	F에러없음_확인(테스트, 에러)
	F같은값_확인(테스트, 출력값, big.NewRat(1, 1))

	// 에러가 발생하는 것을 어떻게 처리해야 하나?
	입력값1 = big.NewRat(1001, 10)
	입력값2 = big.NewRat(0, 1)
	출력값, 에러 = F통화_나누기(입력값1, 입력값2)

	F에러발생_확인(테스트, 에러)
	F참인지_확인(테스트, 출력값 == nil, "")
}

func TestV통화S역수(테스트 *testing.T) {
	입력값 := big.NewRat(1001, 10)
	출력값, 에러 := F통화_역수(입력값)

	F에러없음_확인(테스트, 에러)
	F같은값_확인(테스트, 출력값, big.NewRat(10, 1001))

	입력값 = big.NewRat(0, 1)
	출력값, 에러 = F통화_역수(입력값)

	F에러발생_확인(테스트, 에러)
	F참인지_확인(테스트, 출력값 == nil, "")
}

func TestV통화S반대부호값(테스트 *testing.T) {
	입력값 := big.NewRat(-1001, 10)
	출력값 := F통화_반대부호값(입력값)

	F같은값_확인(테스트, 출력값, big.NewRat(1001, 10))

	입력값 = big.NewRat(1001, 10)
	출력값 = F통화_반대부호값(입력값)

	F같은값_확인(테스트, 출력값, big.NewRat(-1001, 10))
} */
