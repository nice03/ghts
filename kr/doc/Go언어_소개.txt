Go 언어 맛보기.
http://go-tour-kr.appspot.com/

Go언어 관련 번역문서를 모아놓은 곳.
https://code.google.com/p/golang-korea/


Go언어 소개.

1. 누가? : 처음에는 Rob Pike, Ken Thomson이 시작했음.
			현대 컴퓨터 및 인터넷의 주요 기반인 UNIX와 UTF8를 만든 인물이 Ken Thompson이며,
			Rob Pike는 Ken Thompson과 함께 다양한 시스템 소프트웨어를 만든 인물임.
			
2. 언제? : 2000년대 후반.

3. 어디서? : 미국 구글(Google Inc.)

4. 무엇을? : 개발 생산성도 높고, 하드웨어 효율성도 높은 컴퓨터 프로그래밍 언어 Go. 
			흔히, golang으로 칭함. (Go Language의 줄임말.)
			
5. 왜? : C++은 온갖 기능이 너무 많아서 
		- 언어 문법이 복잡하고,
		- 컴파일 속도가 느리고, (컴파일러가 해야할 일이 너무 많음.)
		- 멀티코어 CPU를 효율적을 사용하기 위한 동시처리 및 병렬처리 기능이 없음.
		구글의 대규모 환경에서 개발 생산성도 높고, 멀티코어 CPU를 잘 활용하기 하기 위한
		새로운 프로그래밍 언어가 필요하다고 생각했음.
		Ken Thomson도 여기에 동의하면서 전설적인 인물 2명이 일을 저지르기 시작함.
		목표는 필수적인 기능만을 가진 간단하고 빠르고 효율적인 프로그래밍 언어임.
		(그래서, 가끔 기능이 부족하다거나 불편하다고 느껴질 때도 있음.)

6. 어떻게? : C언어를 기반으로 개발자의 잦은 실수를 유발하던 문제점을 수정한 후,
			간단한 객체지향, (상속 대신 임베딩)
			자동 메모리 관리, (가비지 컬렉션)
			간편한 동시처리 및 병렬처리 기능을 추가하고, (goroutine)
			꼭 필요한 핵심 기능만 넣고, 최대한 기능을 줄여서 빠른 컴파일 속도를 추구함.

인터넷 최대 기업인 Google이 최고의 인재를 모아서 개발한 언어가 Go언어임.
현재는 주로 대규모 인터넷 기업에서 사용됨.

Go언어의 가장 큰 장점은 
1. 단순한 문법.
2. 빠른 컴파일 속도.
3. 간편한 동시성 처리.
4. 자동 메모리 관리.
5. 빠른 실행 성능.

1~4는 개발 생산성에 관련된 항목이고, 
5는 개발 후 실행속도에 관련된 항목.

애초에 필수적인 기능만 포함하고 대신 빠르고 효율적인 언어를 지향했기 때문에,
Scala처럼 기능이 풍부하고 확장성이 높은 언어를 좋아하는 사람에게는 안 맞을 수도 있음.

1. 가장 큰 단점은 IDE(통합 개발환경)이 없다는 것임.
	Java의 Eclipse, C#의 Visual Studio에 익숙한 사람에게는 아주 불편하게 느껴짐.
	그런데, 실제로 써보면 별로 안 불편함.
	Linux 개발자인 Linus Torvalds도 VI라고 하는 텍스트 에디터로 Linux를 개발했음.
	즉, IDE를 사용하지 않고 그토록 거대한 소프트웨어를 개발했음.
	 
2. 한글로 된 문서가 부족함.
	Java, C#, PHP, Python, Ruby등 주류 언어에 비하면 한글 기술 문서가 부족한 편임.
	영어로 된 각종 팁이나 문서는 인터넷에 넘쳐남
	
3. Java의 final, Scala의 val, Ruby의 freeze처럼 
	값을 변경할 수 없도록 고정하는 기능이 없음.
	더 이상 값을 고정시킬 수 있으면, 동시처리에서 자료공유로 인한 온갖 문제를 
	원천적으로 제거할 수 있는 데 언어 자체에서 그런 기능을 지원하지는 않음.
	대신, 값을 구조체로 감싸고 값을 변경할 수 있는 공개된 메소드가 없으면,
	값을 고정시키는 효과를 낼 수 있음.
	그 외 제너릭도 없음. 형변환 하기 귀찮을 때 많음.
	
4. 변수 선언의 순서가 반대라서 처음에 어색함. (int a가 아니고 a int임. 델파이, 파스칼 형식.)
	이것은 컴파일 속도를 빠르게 하기 위한 목적임.
	요즘 새로 나오는 언어들이 많이 채택하는 방식임.

5. if문으로 에러처리를 하다보니 소스코드가 지저분해 짐
	도우미 함수로 어느 정도 해결이 가능하며, 
	if문으로 에러값을 확인하는 과정을 아예 생략하고, 
	함수 전체 차원에 defer recover()를 사용하면 
	Java의 try, catch, finally와 비슷한 효과를 냄.

6. 객체(데이터와 그 데이터를 처리하는 메소드를 함께 가지고 있는 자료형)를 다루는 방식이 
	Java, C#, C++등 일반적인 OOP언어와 다름.
	상속이 아니라 인터페이스 조합, 구조체 조합으로 비슷한 효과를 냄.

7. 메소드 오버로딩이 없음
	각각의 입력 파라메터 형식에 대해서 각각 이름이 다른 별도의 함수를 만들거나,
	하나의 함수에서 타입 switch문으로 입력값 형식을 판별하고 각각 다르게 처리해 주면 됨.
	본인은 타입 switch문 방식을 선호함.
	
	Java나 C#에서는 상속받아서 만든 새로운 타입에 맞는 오버로딩 메소드를 만들지 않아도,
	컴파일 에러가 안 나는 경우가 많아서 깜빡 잊고 그냥 넘어가는 경우가 있지만,
	Go언어의 방식은 타입 switch문의 default문에서 에러 발생하니까, 
	잊어버리고 넘어가는 일이 적어서 오히려 안전한 면도 있음.

이 모든 단점에도 불구하고, 모든 게 다 용서되는 Go언어의 특징은 
환상적으로 빠른 컴파일 속도에 있다.

인간은 대부분 생각의 흐름이 5초 이상 끊기면 집중력이 떨어지기 시작하며,
15초 이상 끊기면 대부분의 경우 딴 생각을 하기 시작함.
Go 언어로 개발하면 컴파일 때문에 집중력이 떨어지는 일은 없음.
따라서, 개발 생산성이 높음.

요약하면, Go언어는 개발속도도 빠르고, 동시처리와 병렬처리도 간편하고, 실행속도도 빠름.

Go 언어 맛보기.
http://go-tour-kr.appspot.com/

Go언어 관련 번역문서를 모아놓은 곳.
https://code.google.com/p/golang-korea/