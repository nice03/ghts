명명규칙

처음에 오는 첫 1~2글자로 형식을  구분함. 
이러한 명명방식을 헝가리안 명명법이라고 하며, 
예전에 많이 사용되었으나 요즘은 별로 사용되지 않음.

이 프로그램에서 굳이 예전 헝가리안 명명법을 사용하는 이유는 

1. 고정값 형식과 변경가능값 형식을 간편하게 구분할 수 있음.
2. 인터페이스와 구조체를 간편하게 구분할 수 있음.

고정값 형식은 여러 모듈이 동시에 작동하면서 자료를 공유할 때 발생할 수 있는 온갖 복잡한 문제를
원천적으로 제거하는 가장 확실한 방법임.

Scala언어에서는 컴파일러 차원에서 고정값과 변경가능값을 val, var로 구분해 주지만,
Go언어는 컴파일 속도를 높이기 위해서 그런 기능을 넣지 않았음. (대신, 컴파일 속도는 환상적으로 빠름.)
값을 상수형으로 만들려면 내부값을 변경하는 메소드가 없는 구조체로 값을 감싸면 됨.
약간 귀찮지만, Go언어의 컴파일 속도를 높이기 위해서꼭 필요한 기능만 넣다보니 생긴 것이며,
Go언어의 환상적인 컴파일 속도와 그로 인한 높은 개발 생산성를 경험해 보면 이 모든 게 용서됨.

I : 일반 인터페이스. Interface의 줄임말.
C : 고정값 자료형 인터페이스. Constant의 줄임말. 
V : 변경가능 자료형 인터페이스. Variable의 줄임말.

F : 일반적인 함수. function의 줄임말.
N : 생성자 함수.  New의 줄임말.
NC : 고정값 자료형 생성자 함수.  'New Constant'의 줄임말.
NV : 변경가능 자료형 생성자. 'New Variable'의 줄임말.

S : 구조체. Structure의 줄임말. (외부에 공개하지 않는 때는 첫 글자를 소문자로 함.)
SC : 고정값 자료형 구조체. 'Structure Constant'의 줄임말.
SV : 변경가능 자료형 구조체. 'Structure Variable'의 줄임말.
G : 구조체의 값을 변경하지 않고 읽기만 하는 메소드. 
       Get의 줄임말. 대개의 경우 반환값이 있다.
S : 구조체의 값을 변경 및 설정하는 메소드.
     	Set의 줄임말. 반환값이 없는 경우가 많다.

Go 언어는 언어 자체에서 생성자를 구현하지 않고, new(<형식>)만으로는 적절한 초기화가 어려움.

이를 해결하기 위해서 다음 패턴을 사용함.
1. 구조체는 외부에 공개하지 않는다. (첫 글자는 소문자 s로 시작함. 상수형은 sC, 변수형은 sV.)
2. 생성자 함수를 통해서만 구조체를 생성할 수 있다. 이 때, 생성자 함수에서 적절한 초기화가 가능하다.
3. 생성한 구조체는 외부에 공개된 인터페이스를 통해서만 사용한다.
   (구조체는 생성된 후에도 공개되지 않은 관계로 직접 사용할 수 없음.)

Java 클래스의 생성자 기능을 Go언어의 구조체, 생성자 함수, 인터페이스 3가지를 조합해서 구현했다.